import { BrowserWindow, safeStorage } from "electron";

import { HeliumWindowOptions, HeliumWindowState } from "../types";
import ShopifyCli from "./ShopifyCli";
import {
  ConnectStoreOptions,
  InitalState,
  PreviewState,
  StoreInfo,
  ThemeInfo,
} from "common/types";
import isDev from "electron-is-dev";
import { generateHeliumId } from "../generateHeliumId";
import main from "main/services/ipc/main";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export class HeliumWindow {
  public browserWindow: BrowserWindow;
  private currentTheme: ThemeInfo | null = null; // for now (might need theme)
  private connectedStore: StoreInfo | null = null; // for now
  public shopifyCli: ShopifyCli;
  private isUiReady: boolean;
  constructor(private options?: HeliumWindowOptions) {
    console.log(options);
    // the idea here is that we should wait for the loading screen to initally render (in other words, react should be ready) before we try an do anyting
    // at first, we are waiting for the inital state to be loaded
    this.isUiReady = false;

    // should this be a circular dependency???
    this.shopifyCli = new ShopifyCli(this);
    // console.log(path.resolve(__dirname, "../assets/icons/Desktop Logo.icns"));
    // console.log(path.join(__dirname, "../assets", "icons", "helium.png"));

    this.browserWindow = new BrowserWindow({
      title: "Helium IDE",
      center: true,
      // frame: false,
      width: 1200,
      height: 900,
      minHeight: 600,
      minWidth: 600,
      backgroundColor: "#171717",
      // icon: path.resolve(__dirname, "../assets", "icons", "helium.png"),
      // show: false,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });

    this.browserWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // ipcMain.on('ui-ready', async (event) => {
      
    //   const initalState = await this.loadInitalState();
    //   this.triggerOnAppReadyEvent(initalState, event.sender);
    // })

    // this.browserWindow.webContents.on("did-finish-load", async () => {
    //   // need to make sure this even is triggered 
    //   const initalState = await this.loadInitalState();
    //   this.triggerOnAppReadyEvent(initalState);
    // });

    // this.browserWindow.webContents.on("dom-ready", () => {
    //   console.log("dom-ready");
    // });

    // this.browserWindow.once("ready-to-show", () => {
    //   console.log("ready-to-show");
    // });

    // these functions need to be called after the BrowserWindow has been created
    // since the browserWindow.id is used when these functions are called

    if (isDev) {
      this.browserWindow.webContents.openDevTools();
    }

    // // think about this
    // might just end up showing the window immediately and setting the background color

    //makes the app feel slow
  }

  //   public setTheme(path: string) {}
  //   public disconnectCurrentStore() {}
  //   public connectStore() {}

  public getId() {
    return this.browserWindow.id;
  }

  public getCurrentTheme() {
    return this.currentTheme;
  }

  public getConnectedStore() {
    return this.connectedStore;
  }

  public connectStore(options: ConnectStoreOptions) {
    //in UI make sure preview is not running
    // this is used for new stores
    // will this method be async???
    const store = {
      heliumId: generateHeliumId(),
      themeAccessPassword: safeStorage
        .encryptString(options.password)
        .toString(),
      url: options.storeUrl,
    };


    this.connectedStore = store;

    return Promise.resolve();
  }

  public getWindowState(): HeliumWindowState {
    return {
      isMinimized: this.browserWindow.isMinimized(),
      isMaximized: this.browserWindow.isMaximized(),
      isFocused: this.browserWindow.isFocused(),
    };
  }

  public async loadInitalState(): Promise<InitalState> {
    // if there are any inital options (stores or themes) to be loaded, they will be done here

    // the loading screen should show for a minimum of 1 or 2 seconcds (500ms???) so it doesnt seem too jarring
    // if loading takes longer that is fine
    return {
      connectedStore: this.connectedStore,
      currentTheme: this.currentTheme, // also send ThemeFileEntry array (might be a tuple)
      themeFiles: [],
      previewState: PreviewState.OFF, // define this in the UI?? (there could be a case where the user wants the window/app launched with the preview open)
    };
  }

  public emitOnInitalStateReady(initalState: InitalState) {
    main.emitEventFromWindow(this, 'on-inital-state-ready', initalState);
  }

  public updateUiIsReady() { // figure out naming later
    if (this.isUiReady) return; // might throw error instead
    this.isUiReady = true;
  }
}
