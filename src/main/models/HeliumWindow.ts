import { BrowserWindow } from "electron";

import { HeliumWindowOptions, HeliumWindowState } from "../types";
import ShopifyCli from "./ShopifyCli";
import { StoreInfo, ThemeInfo } from "common/types";
import path from "path";
import { handleAppIpc } from "../services/app";
import { handleFsIpc } from "../services/fs";
import { handleShopifyIpc } from "../services/shopify";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export class HeliumWindow {
  public browserWindow: BrowserWindow;
  private currentTheme: ThemeInfo | null = null; // for now (might need theme)
  private connectedStore: StoreInfo | null = null; // for now
  private shopifyCli: ShopifyCli;
  constructor(options?: HeliumWindowOptions) {
    console.log(options);

    // should this be a circular dependency???
    this.shopifyCli = new ShopifyCli(this);
    // console.log(path.resolve(__dirname, "../assets/icons/Desktop Logo.icns"));
    // console.log(path.join(__dirname, "../assets", "icons", "helium.png"));

    this.browserWindow = new BrowserWindow({
      title: "Helium IDE",
      center: true,
      // frame: false,
      width: 1200,
      height: 900,
      minHeight: 600,
      minWidth: 600,
      // icon: path.resolve(__dirname, "../assets", "icons", "helium.png"),
      show: false,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });

    // these functions need to be called after the BrowserWindow has been created
    // since the browserWindow.id is used when these functions are called
    handleAppIpc(this);
    handleShopifyIpc(this);
    handleFsIpc(this);

    // // think about this
    this.browserWindow.on("ready-to-show", () => {
      this.browserWindow.show();
    });

    this.browserWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  }

  //   public setTheme(path: string) {}
  //   public disconnectCurrentStore() {}
  //   public connectStore() {}

  public getId() {
    return this.browserWindow.id;
  }

  public getCurrentTheme() {
    return this.currentTheme;
  }

  public getConnectedStore() {
    return this.connectedStore;
  }

  public getWindowState(): HeliumWindowState {
    return {
      isMinimized: this.browserWindow.isMinimized(),
      isMaximized: this.browserWindow.isMaximized(),
      isFocused: this.browserWindow.isFocused(),
    };
  }
}
