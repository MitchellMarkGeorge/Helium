import { BrowserWindow, safeStorage } from "electron";

import { HeliumWindowOptions, HeliumWindowState } from "../types";
import ShopifyCli from "./ShopifyCli";
import {
  ConnectStoreOptions,
  InitalState,
  OpenThemeResult,
  PreviewState,
  StoreInfo,
  ThemeFileSystemEntry,
  ThemeInfo,
} from "common/types";
import isDev from "electron-is-dev";
import { generateHeliumId } from "../generateHeliumId";
import main from "main/services/ipc/main";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export class HeliumWindow {
  public browserWindow: BrowserWindow;
  private currentTheme: ThemeInfo | null = null; // for now (might need theme)
  private connectedStore: StoreInfo | null = null; // for now
  public shopifyCli: ShopifyCli;
  constructor(private options?: HeliumWindowOptions) {
    console.log(options);
    // should this be a circular dependency???
    this.shopifyCli = new ShopifyCli(this);
    // console.log(path.resolve(__dirname, "../assets/icons/Desktop Logo.icns"));
    // console.log(path.join(__dirname, "../assets", "icons", "helium.png"));

    this.browserWindow = new BrowserWindow({
      title: "Helium IDE",
      center: true,
      // frame: false,
      width: 1200,
      height: 900,
      minHeight: 600,
      minWidth: 600,
      backgroundColor: "#171717",
      // icon: path.resolve(__dirname, "../assets", "icons", "helium.png"),
      // show: false,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });

    this.browserWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    if (isDev) {
      this.browserWindow.webContents.openDevTools();
    }

    // // think about this
    // might just end up showing the window immediately and setting the background color

    //makes the app feel slow
  }

  //   public setTheme(path: string) {}
  //   public disconnectCurrentStore() {}
  //   public connectStore() {}

  public getId() {
    return this.browserWindow.id;
  }

  public getCurrentTheme() {
    return this.currentTheme;
  }

  public getConnectedStore() {
    return this.connectedStore;
  }

  public async openTheme(themePath: string): Promise<OpenThemeResult> {
    // needs to be an absolute path
    // check if path exists. if not, throw error
    // read the directory to get all the root level files and folders in array
    // validate theme file structure. if not valid, throw error
    // read theme info from settings_data.json
    // set this.currentTheme = openedTheme;
    // attach watcher to this path so the ui is notified of any changes at the root level
    return { themeInfo: this.currentTheme, files: [] }; // for now
  }

  private async isThemeFileStructureValid(files: ThemeFileSystemEntry[]) {
    // much easier to use array as it in an array form, it will only have the files and folders it has, so it is 
    // easier to validate if there are any subdirectories that aren't meant to be there

    // https://shopify.dev/docs/themes/architecture#directory-structure-and-component-types
    // should at least have a layout/theme.liquid. if this is not present, throw return false
    // if there is only one item in the array and it is the above case, continue
    // if not, return false
    // loop over the `files` array and that the remaining subdirectories are of the allowed directory types
    //
  }

  public connectStore(options: ConnectStoreOptions) {
    //in UI make sure preview is not running
    // this is used for new stores
    // will this method be async???
    const store = {
      heliumId: generateHeliumId(),
      themeAccessPassword: safeStorage
        .encryptString(options.password)
        .toString(),
      url: options.storeUrl,
    };

    this.connectedStore = store;

    return Promise.resolve();
  }

  public getWindowState(): HeliumWindowState {
    return {
      isMinimized: this.browserWindow.isMinimized(),
      isMaximized: this.browserWindow.isMaximized(),
      isFocused: this.browserWindow.isFocused(),
    };
  }

  public async loadInitalState(): Promise<InitalState> {
    // if there are any inital options (stores or themes) to be loaded, they will be done here

    // if (this.options?.themePathOrUrl)

    // the loading screen should show for a minimum of 1 or 2 seconcds (500ms???) so it doesnt seem too jarring
    // if loading takes longer that is fine
    return {
      connectedStore: this.connectedStore,
      currentTheme: this.currentTheme, // also send ThemeFileEntry array (might be a tuple)
      themeFiles: [],
      previewState: PreviewState.OFF, // (there could be a case where the user wants the window/app launched with the preview open)
    };
  }

  public emitOnInitalStateReady(initalState: InitalState) {
    main.emitEventFromWindow(this, "on-inital-state-ready", initalState);
  }
}
